[
    {kernel, [
        {logger_level, info},
        {logger, [
            {handler, default, logger_std_h, #{
                level => debug,
                config => #{
                    type => standard_io,
                    sync_mode_qlen => 2000,
                    drop_mode_qlen => 2000,
                    flush_qlen => 3000
                },
                filters => [{access_log, {fun logger_filters:domain/2, {stop, equal, [cowboy_access_log]}}}],
                formatter => {logger_logstash_formatter, #{}}
            }},
            {handler, access_logger, logger_std_h, #{
                level => info,
                config => #{
                    type => standard_io,
                    sync_mode_qlen => 2000,
                    drop_mode_qlen => 2000,
                    flush_qlen => 3000
                },
                filters => [{access_log, {fun logger_filters:domain/2, {stop, not_equal, [cowboy_access_log]}}}],
                formatter => {logger_logstash_formatter, #{}}
            }}
        ]}
    ]},

    {scoper, [
        {storage, scoper_storage_logger}
    ]},

    {capi, [
        {ip                  , "::"                     },
        {port                , 8080                     },
        {service_type        , real                     },
        {access_conf, #{
            jwt => #{
                signee => capi,
                keyset => #{
                    keycloak => {pem_file, "/var/lib/capi/keys/keycloak/keycloak.pubkey.pem"},
                    capi     => {pem_file, "/var/lib/capi/keys/capi.privkey.pem"}
                }
            }
        }},
        {oops_bodies, #{
            500 => "/var/lib/capi/oops-bodies/oopsBody1",
            501 => "/var/lib/capi/oops-bodies/oopsBody1",
            502 => "/var/lib/capi/oops-bodies/oopsBody1",
            503 => "/var/lib/capi/oops-bodies/oopsBody2",
            504 => "/var/lib/capi/oops-bodies/oopsBody2"
        }},
        {api_key_blacklist, #{
            update_interval => 50000, % milliseconds
            blacklisted_keys_dir => "/opt/capi"
        }},
        {swagger_handler_opts, #{
             validation_opts => #{
                 schema => #{
                     response => mild
                 }
             }
        }},
        {health_check, #{
            disk    => {erl_health, disk     , ["/", 99]},
            memory  => {erl_health, cg_memory, [70]},
            service => {erl_health, service  , [<<"capi-v2">>]}
        }},
        {max_request_deadline, 60000}, % milliseconds
        {reporter_url_lifetime, 300}, % seconds
        {default_processing_deadline, <<"30m">>},
        {lechiffre_opts, #{
            decryption_sources => [
                {json, {file, <<"/var/lib/capi/keys/token_encryption_key1.jwk">>}}
            ]
        }}
    ]},

    {capi_woody_client, [
        {services, #{
            invoicing => #{
                url => "http://hellgate:8022/v1/processing/invoicing",
                transport_opts => #{
                    pool => invoicing
                    %timeout => {{ woody_client_keep_alive }},
                    %max_connections => {{ salt['pillar.get']('wetkitty:macroservice:limits:concurrent-payments') }}
                }
            },
            invoice_templating => #{
                url => "http://hellgate:8022/v1/processing/invoice_templating",
                transport_opts => #{
                    pool => invoice_templating
                    %timeout => {{ woody_client_keep_alive }}
                }
            },
            merchant_stat => #{
                url => "http://magista:8022/stat",
                transport_opts => #{
                    pool => merchant_stat
                    %timeout => {{ woody_client_keep_alive }}
                }
            },
            party_management => #{
                url => "http://hellgate:8022/v1/processing/partymgmt",
                transport_opts => #{
                    pool => party_management
                    %timeout => {{ woody_client_keep_alive }}
                }
            },
            geo_ip_service => #{
                url => "http://columbus:8022/repo",
                transport_opts => #{
                    pool => geo_ip_service
                    %timeout => {{ woody_client_keep_alive }}
                }
            },
            accounter => #{
                url => "http://shumway:8022/accounter",
                transport_opts => #{
                    pool => accounter
                    %timeout => {{ woody_client_keep_alive }},
                    %max_connections => {{ salt['pillar.get']('wetkitty:macroservice:limits:concurrent-payments') }}
                }
            },
            file_storage => #{
                url => "http://file_storage:8022/file_storage",
                transport_opts => #{
                    pool => file_storage
                    %timeout => {{ woody_client_keep_alive }}
                }
            },
            reporting => #{
                url => "http://reporter:8022/reports/new-proto",
                transport_opts => #{
                    pool => reporting
                    %timeout => {{ woody_client_keep_alive }}
                }
            },
            payouts => #{
                url => "http://payouter:8022/payout/management",
                transport_opts => #{
                    pool => payouts
                    %timeout => {{ woody_client_keep_alive }}
                }
            },
            webhook_manager => #{
                url => "http://hooker:8022/hook",
                transport_opts => #{
                    pool => webhook_manager
                    %timeout => {{ woody_client_keep_alive }}
                }
            },
            customer_management => #{
                url => "http://hellgate:8022/v1/processing/customer_management",
                transport_opts => #{
                    pool => customer_management
                    %timeout => {{ woody_client_keep_alive }}
                }
            }
        }},
        {service_deadlines, #{
            bender              => 30000,
            invoicing           => 30000, % milliseconds
            party_management    => 30000,
            customer_management => 30000
        }}
    ]},

    {bender_client, [
        {services, #{
            'Bender' => <<"http://bender:8022/v1/bender">>,
            'Generator' => <<"http://bender:8022/v1/generator">>
        }},
        {deadline, 60000}
    ]},

    {dmt_client, [
        {cache_update_interval, 30000}, % milliseconds
        {cache_server_call_timeout, 30000}, % milliseconds
        {max_cache_size, #{
            elements => 5,
            memory => 52428800 % 50Mb
        }},
        {service_urls, #{
            'Repository'       => <<"http://dominant:8022/v1/domain/repository">>,
            'RepositoryClient' => <<"http://dominant:8022/v1/domain/repository_client">>
        }}
    ]},

    {how_are_you, [
        {metrics_handlers, [
            hay_vm_handler,
            hay_cgroup_handler,
            woody_api_hay
        ]},
        {metrics_publishers, [
            %{hay_statsd_publisher, #{
            %   key_prefix => <<"{{ service_name }}.">>,
            %   host => "{{ salt['pillar.get']('wetkitty:statsd:host') }}",
            %   port => {{ salt['pillar.get']('wetkitty:statsd:port') }}
            %}}
        ]}
    ]},

    {hackney, [
        {mod_metrics, woody_client_metrics}
    ]},

    {os_mon, [
        {disksup_posix_only, true}
    ]},

    {snowflake, [{machine_id, hostname_hash}]},

    {prometheus, [
        {collectors, [default]}
    ]}
].
