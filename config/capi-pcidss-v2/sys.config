[
    {kernel, [
        {logger_level, info},
        {logger, [
            {handler, default, logger_std_h, #{
                level => debug,
                config => #{
                    type => standard_io,
                    sync_mode_qlen => 2000,
                    drop_mode_qlen => 2000,
                    flush_qlen => 3000
                },
                filters => [{access_log, {fun logger_filters:domain/2, {stop, equal, [cowboy_access_log]}}}],
                formatter => {logger_logstash_formatter, #{
                    message_redaction_regex_list => [
                        %% PAN
                        "(?<=\\W[2-6][0-9]{5})[0-9]{1,11}(?=[0-9]{2}\\W)",
                        %% Expiration date
                        "(?<=\\W)[0-9]{1,2}[\\s.,-/]([0-9]{2}|2[0-9]{3})(?=\\W)",
                        %% CVV / CVV2 / CSC
                        "(?<=\\W)[0-9]{3,4}(?=\\W)"
                    ]
                }}
            }},
            {handler, access_logger, logger_std_h, #{
                level => info,
                config => #{
                    type => standard_io,
                    sync_mode_qlen => 2000,
                    drop_mode_qlen => 2000,
                    flush_qlen => 3000
                },
                filters => [{access_log, {fun logger_filters:domain/2, {stop, not_equal, [cowboy_access_log]}}}],
                formatter => {logger_logstash_formatter, #{
                    message_redaction_regex_list => [
                        %% PAN
                        "(?<=\\W[2-6][0-9]{5})[0-9]{1,11}(?=[0-9]{2}\\W)",
                        %% Expiration date
                        "(?<=\\W)[0-9]{1,2}[\\s.,-/]([0-9]{2}|2[0-9]{3})(?=\\W)",
                        %% CVV / CVV2 / CSC
                        "(?<=\\W)[0-9]{3,4}(?=\\W)"
                    ]
                }}
            }}
        ]}
    ]},

    {scoper, [
        {storage, scoper_storage_logger}
    ]},

    {capi_pcidss, [
        {ip                  , "::"                     },
        {port                , 8080                     },
        {service_type        , real                     },
        {access_conf, #{
            jwt => #{
                keyset => #{
                    keycloak => {pem_file, "/var/lib/capi/keys/keycloak/keycloak.pubkey.pem"},
                    capi     => {pem_file, "/var/lib/capi/keys/capi.privkey.pem"}
                }
            },
            access => #{
                service_name => <<"common-api">>,
                resource_hierarchy => #{
                    payment_resources   => #{}
                }
            }
        }},
        {oops_bodies, #{
            500 => "/var/lib/capi/oops-bodies/oopsBody1",
            501 => "/var/lib/capi/oops-bodies/oopsBody1",
            502 => "/var/lib/capi/oops-bodies/oopsBody1",
            503 => "/var/lib/capi/oops-bodies/oopsBody2",
            504 => "/var/lib/capi/oops-bodies/oopsBody2"
        }},
        {health_checkers, [
            {erl_health, disk     , ["/", 99]},
            {erl_health, cg_memory, [70]},
            {erl_health, service  , [<<"capi-pcidss-v2">>]}
        ]},
        {max_request_deadline, 60000}, % milliseconds
        {lechiffre_opts, #{
            encryption_source => {json, {file, <<"/var/lib/capi/keys/token_encryption_key1.jwk">>}}
        }},
        {validation, #{
            %% By default now = current datetime.
            now => { {2020, 2, 1}, {0, 0, 0} }
        }}
    ]},

    {capi_woody_client, [
        {services, #{
            cds_storage => #{
                url => "http://cds:8022/v2/storage",
                transport_opts => #{
                    pool => cds_storage,
                    timeout => 1000,
                    max_connections => 1
                }
            },
            tds_storage => #{
                url => "http://cds:8022/v1/token_storage",
                transport_opts => #{
                    pool => tds_storage,
                    timeout => 1000
                }
            },
            binbase => #{
                url => "http://binbase:8022/v1/binbase",
                transport_opts => #{
                    pool =>  binbase,
                    timeout => 1000,
                    max_connections => 1
                }
            },
            bender => #{
                url => "http://bender:8022/v1/bender",
                transport_opts => #{
                    pool => bender,
                    timeout => 1000,
                    max_connections => 1
                }
            }
        }}
    ]},

    {hackney, [
        {mod_metrics, woody_client_metrics}
    ]},

    {how_are_you, [
        {metrics_publishers, []}
    ]},

    {os_mon, [
        {disksup_posix_only, true}
    ]},

    {prometheus, [
        {collectors, [default]}
    ]}
].
